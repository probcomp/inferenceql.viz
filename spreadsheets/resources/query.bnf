(* Queries *)

query               ::= <'SELECT'> <ws> selections (<ws> <'FROM'> <ws> source) (<ws> <'WHERE'> <ws> conditions)? (<ws> <'LIMIT'> <ws> limit)? <';'>?
<p-query>           ::= query | <'('> query <')'>

(* Selections *)

selections          ::= star | p-column-or-prob (<','> <ws>? p-column-or-prob)*
<p-column-or-prob>  ::= column-or-prob | <'('> column-or-prob <')'>
<column-or-prob>    ::= column-selection | probability-of
column-selection    ::= column-name

(* Sources *)

source              ::= <'data'> | <'('> query <')'> | <'('> generate <')'>

(* Conditions *)

conditions          ::= condition (<ws> <'AND'> <ws> condition)*
<condition>         ::= or-condition
                      | presence-condition
                      | absence-condition
                      | equality-condition
                      | predicate-condition
<subcondition>      ::= condition | and-condition
or-condition        ::= subcondition <ws> <'OR'> <ws> subcondition
and-condition       ::= condition (<ws> <'AND'> <ws> condition)+
presence-condition  ::= column-name <ws> <'IS NOT NULL'>
absence-condition   ::= column-name <ws> <'IS NULL'>
equality-condition  ::= column-name <ws>? <'='> <ws>? value
predicate-condition ::= column-name <ws>? predicate <ws>? value
predicate           ::= (#"<" | #">" | #"<=" | #">=")

(* Generate *)

(* TODO: Make model optional *)

generate            ::= <'GENERATE'> <ws> generated (<ws> <'GIVEN'> <ws> bindings)? <ws> <'UNDER'> <ws> model
generated           ::= column-name (<','> <ws> column-name)*
bindings            ::= binding (<','> <ws> binding)*

(* Probability *)

probability-of      ::= <'PROBABILITY OF'> <ws> event (<ws> <'GIVEN'> <ws> constraints)? <ws> <'UNDER'> <ws> model
binding             ::= column-name <ws>? <'='> <ws>? value
constraints         ::= star | event (<','> <ws>? event)*
<event>             ::= binding-event | column-event
binding-event       ::= binding
column-event        ::= column-name

(* Literals *)

<value>             ::= float | int | string
float               ::= #'-?\d+\.\d+(E-?\d+)?'
int                 ::= #'-?\d+'
nat                 ::= #'\d+'
string              ::= #'\"([^\"]+)\"'
symbol              ::= #'[a-zA-Z]\w*'

(* Limit *)

limit               ::= nat

(* Shared *)

model               ::= model-lookup | model-generate
model-lookup        ::= model-name
model-generate      ::= <'('> generate <')'>
model-name          ::= symbol | <'"'> symbol <'"'>
column-name         ::= symbol | <'"'> symbol <'"'>

star                ::= <'*'>

ws                  ::= #'\s+'
